import { should } from "fuse-test-runner";
import { KeyboardHelper } from "../lib/keyboard.helper";
import { DefaultKeyboardEffects } from '../lib/constants';

/**
 * These tests more than anything are visual, so 
 * you should be able to see your kkeyboard changing colors as the tests run
 * fifteen seconds after the last test has ran your keyboard should
 * return to the normal effects you had previously set
 * 
 */
export class KeyboardHelperTest {
  keyboardInstance: KeyboardHelper = null;
  currentAnimations: string[] = [];

  beforeEach() {
    this.keyboardInstance = new KeyboardHelper(true, {
      author: {
        name: "Chroma Tester",
        contact: "Tester"
      },
      title: "Chroma SDK Test Runner",
      device_supported: ["keyboard"],
      category: "application",
      description: "Test App"
    });
    // it's important to return for the test runner to wait for resolution
    return this.keyboardInstance.init();
  }

  async  "Should Stop The Current Animation"() {
    const id = await this.keyboardInstance.stopAnimation(true);
    should(id)
      .beString();
    this.currentAnimations.push(id);
    return;
  }

  async  "Should Set a Static Color"() {
    const id = await this.keyboardInstance.setStatic(255, true);
    should(id)
      .beString();
    this.currentAnimations.push(id);
    return;
  }

  async  "Should set a Custom Effect"() {
    const id = await this.keyboardInstance.createCustom({
      effect: DefaultKeyboardEffects.CHROMA_CUSTOM,
      param: [
        [255, 160, 120, 100, 200, 20, 157, 120, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
        [65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280],
        [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
        [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535],
        [16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960],
        [16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935]
      ]
    }, true);
    should(id)
      .beString();
    this.currentAnimations.push(id);
    return;
  }

  async  "Should set a Custom Key Effect"() {
    const id = await this.keyboardInstance.createCustomkeys({
      effect: DefaultKeyboardEffects.CHROMA_CUSTOM_KEY,
      param: {
        color: [
          [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 255, 255, 255, 255, 255, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
          [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 255, 255, 255, 255, 255, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
          [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 255, 255, 255, 255, 255, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
          [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 255, 255, 255, 255, 255, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
          [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 255, 255, 255, 255, 255, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
          [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 255, 255, 255, 255, 255, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535]
        ],
        key: [
          [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, (16777216 | ~255), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, (16777216 | ~255), (16777216 | ~255), (16777216 | ~255), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (16777216 | ~16776960), 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (16777216 | ~16776960), (16777216 | ~16776960), (16777216 | ~16776960), 0, 0, 0, 0]
        ]
      }
    }, true);
    should(id)
      .beString();
    this.currentAnimations.push(id);
    return;
  }

  async  "Should set a Custom Group Effect"() {
    const id = await this.keyboardInstance.createEffectGroup({
      effects: [
        {
          effect: DefaultKeyboardEffects.CHROMA_NONE
        },
        {
          effect: DefaultKeyboardEffects.CHROMA_STATIC,
          param: {
            color: 255
          }
        },
        {
          effect: DefaultKeyboardEffects.CHROMA_CUSTOM,
          param: [
            [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255],
            [65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280],
            [16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680],
            [65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535],
            [16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960, 16776960],
            [16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935, 16711935]
          ]
        },
        {
          effect: DefaultKeyboardEffects.CHROMA_CUSTOM_KEY,
          param: {
            color: [
              [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 16711680, 16711680, 16711680, 16711680, 16711680, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
              [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 16711680, 16711680, 16711680, 16711680, 16711680, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
              [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 16711680, 16711680, 16711680, 16711680, 16711680, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
              [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 16711680, 16711680, 16711680, 16711680, 16711680, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
              [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 16711680, 16711680, 16711680, 16711680, 16711680, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535],
              [255, 255, 255, 255, 255, 65280, 65280, 65280, 65280, 65280, 16711680, 16711680, 16711680, 16711680, 16711680, 16776960, 16776960, 16776960, 65535, 65535, 65535, 65535]
            ],
            key: [
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, (16777216 | ~255), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, (16777216 | ~255), (16777216 | ~255), (16777216 | ~255), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (16777216 | ~16776960), 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (16777216 | ~16776960), (16777216 | ~16776960), (16777216 | ~16776960), 0, 0, 0, 0]
            ]
          }
        }
      ]
    }, true);
    should(id)
      .beObject()
      .beArray();
    this.currentAnimations.push(...id);
    return;
  }



  afterEach() {
    this.keyboardInstance.deleteEffect(this.currentAnimations);
    this.currentAnimations = [];
    this.keyboardInstance.unload();
  }

}
